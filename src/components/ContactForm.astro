---
interface Props {
    messagePlaceholder?: string;
    campos: string[];
}

const props = Astro.props as Props;

const restaurantAndProto = props.campos.includes("restaurant") && props.campos.includes("proto");
---

<form action="https://getform.io/f/aolmmveb" method="POST" class="form">
    <div class="form-first-row">
        {props.campos.includes("name") && (
            <input type="text" name="name" placeholder="Nombre" required>
        )}
        <input type="email" name="email" placeholder="Correo electrónico" required>
    </div>

    {restaurantAndProto && (
        <div class="form-second-row">
            <input type="text" name="restaurant" placeholder="Nombre del restaurante" required>
            <input type="text" name="proto" placeholder="Nombre del prototipo" required>
        </div> 
    )}

    {!restaurantAndProto && props.campos.includes("restaurant") && (
        <input type="text" name="restaurant" placeholder="Nombre del restaurante" required>
    )}

    {!restaurantAndProto && props.campos.includes("proto") && (
        <input type="text" name="proto" placeholder="Nombre del prototipo" required>
    )}

    {props.campos.includes("plan") && (
        <div class="form-plan">
            <p>Selecciona el plan:</p>
            <div class="form-plan-options">
                <label class="plan-option">
                    <input type="radio" name="plan" value="El que no corre vuela" required>
                    <span class="button">El que no corre vuela</span>
                </label>

                <label class="plan-option">
                    <input type="radio" name="plan" value="Único en su salsa" required disabled>
                    <span class="button button-disabled">Único en su salsa</span>
                </label>

                <label class="plan-option">
                    <input type="radio" name="plan" value="Mesa para todos" required disabled>
                    <span class="button button-disabled">Mesa para todos</span>
                </label>
            </div>
        </div>
    )}

    {props.campos.includes("message") && (
        <textarea name="message" placeholder={props.messagePlaceholder} required></textarea>
    )}
    
    <input type="hidden" name="_gotcha" style="display:none !important">
    <button type="submit">Enviar</button>
</form>

<style>
    .form {
        width: 800px;
        max-width: 100%;
        margin: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 20px;
        padding: 30px 40px;
        background-color: var(--color-white);
        border-radius: 10px;

        container-type: inline-size;
    }

    .form-first-row {
        display: flex;
        gap: 10px;
    }

    @container (max-width: 400px) {
        .form-first-row {
            flex-direction: column;
        }
    }

    .form-first-row input:first-child {
        flex: 6;
    }

    .form-first-row input:last-child {
        flex: 7;
    }

    .form-second-row {
        display: flex;
        gap: 10px;
    }

    @media screen and (max-width: 550px) {
        .form-second-row {
            flex-direction: column;
        }
    }

    .form-second-row input:first-child {
        flex: 7;
    }

    .form-second-row input:last-child {
        flex: 6;
    }

    .form-plan {
        display: flex;
        flex-direction: column;
        text-align: left;
        color: #0000008c;
    }

    .form-plan-options {
        display: flex;
        gap: 10px;
        flex-wrap: wrap; 
        width: 100%;
    }

    .plan-option {
        display: inline-block;
        flex: 1 1 calc(33.33% - 10px);
    }

    .plan-option input {
        display: none; 
    }

    @media screen and (max-width: 500px) {
        .plan-option {
            flex: 1 1 calc(50% - 10px);
        }
    }

    @media screen and (max-width: 400px) {
        .plan-option {
            flex: 1 1 calc(100% - 10px);
        }
    }

    .button {
        display: block;
        width: 100%; 
        padding: 5px 10px;
        border: 1px solid var(--color-grey);
        color: #0000008c;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
    }

    .button:hover {
        background-color: var(--color-grey);
        color: var(--color-white);
    }

    .plan-option input:checked + .button {
        background-color: var(--color-yellow);
        color: var(--color-grey);
        border-color: var(--color-yellow);
    }

    input {
        padding: 5px 10px;
        background-color: var(--color-white);
        border: 1px solid var(--color-grey);
    }

    input:focus {
        outline: none;
    }

    textarea {
        padding: 5px 10px;
        background-color: var(--color-white);
        border: 1px solid var(--color-grey);
        resize: none;
        height: 120px;
    }

    textarea:focus {
        outline: none;
    }

    button {
        width: 150px;
        padding: 5px 10px;
        background-color: var(--color-green);
        border: none;
        color: #fff;
    }

    button:hover {
        background-color: var(--color-green-hover);
    }
</style>

<script>
    const buttonDisabled = document.querySelectorAll(".button-disabled");

    buttonDisabled.forEach(button => {
        button.addEventListener("mouseover", () => {
            button.textContent = "No disponible";
        });
    });


</script>